# -*- coding: utf-8 -*-
"""CSJ Vulnerability Assessment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BBwP9OVilxvfA0V0AhjasbqH7azbK3ql
"""

import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# !pip3 install contextily
import contextily as ctx

from google.colab import drive

drive.mount("/content/gdrive", force_remount = True)

"""# i15 Crop Mapping Dataset"""

# Set filepath to i15 crop mapping dataset
fp = "/content/gdrive/MyDrive/CYPLAN 190 CSJ Module 1/Environment Sustainability/i15_crop_mapping_2021_provisional_shp/i15_Crop_Mapping_2021_Provisional_SHP"

# Read file using gpd.read_file()
data = gpd.read_file(fp)

# Filter dataset for central san joaquin valley counties
csj_counties = ['Madera', 'Fresno', 'Kings', 'Tulare']

filtered_crop = data[data['COUNTY'].isin(csj_counties)]
filtered_crop = filtered_crop.reset_index()

# Filter dataset column main_crop to show major mapping fields only
crop_names = {"R": "rice", "P": "pasture", "G" : "grain and hay crop", "T" : "truck nursery and berry crops", "F" : "field crops", "C": "citrus and subtropical",
              "D" : "deciduous fruits and nuts", "V" : "vineyard", "Y" : "young perennial", "I" : "idle", "X" : "unclassified"}

filtered_crop['main_crop_f'] = filtered_crop['MAIN_CROP'].str[0]
filtered_crop['main_crop_f'] = filtered_crop['main_crop_f'].replace(crop_names)

# Plot a map of the main crops dispersion in the csj valley region
ax = filtered_crop.plot(column = "main_crop_f", alpha = 0.5, figsize = (12,28), legend = True)

ctx.add_basemap(ax, crs= filtered_crop.crs)

plt.savefig('crop_map.pdf')  # saves the current figure

# R = rice, P = pasture, G = grain and hay crop, T = truck nursery and berry crops, F = field crops, C = citrus and subtropical,
# D = deciduous fruits and nuts, V = vineyard, Y = young perennial, I = idle, U = urban unspecified/landscape, X = unclassified

# Calculate amount of acres taken by each crop and their percentage in total
crop_amount = filtered_crop[["COUNTY", "main_crop_f", "ACRES"]].groupby("main_crop_f").sum().sort_values("ACRES", ascending = False)
total_crop_acres = sum(crop_amount["ACRES"])

crop_amount["Percentage (%)"] = crop_amount["ACRES"] / total_crop_acres * 100

print("Total Acres of Crop Land is: ", total_crop_acres)

# Reset index
crop_amount = crop_amount.reset_index()

# Change main_crop_f names to crops
crop_names = {"R": "rice", "P": "pasture", "G" : "grain and hay crop", "T" : "truck nursery and berry crops", "F" : "field crops", "C": "citrus and subtropical",
              "D" : "deciduous fruits and nuts", "V" : "vineyard", "Y" : "young perennial", "I" : "idle", "X" : "unclassified"}

crop_amount = crop_amount.replace(crop_names)

# Using dataframe crop_amount: pie chart

import altair as alt
chart = alt.Chart(crop_amount).mark_arc().encode(
    theta=alt.Theta("ACRES:Q", stack=True),
    color=alt.Color("main_crop_f:N"),
    tooltip=["main_crop_f:N", "ACRES:Q", "Percentage (%):Q"]
).properties(height=300, width=300)
chart

"""# CA Heatmap by County and Zip Code"""

# Set filepath to CA Heatmap level
fp =  '/content/gdrive/MyDrive/CYPLAN 190 CSJ Module 1/Environment Sustainability/Heatmap_ziplevel_7.7.2022'
fp1 = '/content/gdrive/MyDrive/CYPLAN 190 CSJ Module 1/Environment Sustainability/Heatmap_county_7.7.2022'
# Read file using gpd.read_file()
heat_zip_data = gpd.read_file(fp)
heat_county_data = gpd.read_file(fp1)

# Filter heat_county_data for csj valley counties
heat_county_data = heat_county_data[heat_county_data["County_P_1"].isin(csj_counties)]

# Match Heat zip data and heat county data crs
heat_zip_data = heat_zip_data.to_crs(heat_county_data.crs)

# Making plots of ER visits for extreme heat to diagnose how counties are affected by extreme heat
fig, axes = plt.subplots(nrows=1,ncols=2,figsize=(12,6))

# plot first pandas frame in subplot style
ax1 = heat_county_data.plot("County_P_4", cmap = 'OrRd', ax = axes[0], legend = True)
# plot second pandas frame in subplot style
ax2 = heat_county_data.plot("County_P_5", cmap = 'OrRd', ax = axes[1], legend = True)


ax1.set_axis_off()
ax1.set_title('Rate of Daily Excess ER Visits by County')
ax2.set_axis_off()
ax2.set_title('Number of Daily Excess ER Visits by County')
plt.savefig('ER Visits County.pdf')  # saves the current figure
plt.show()

# Making plots of ER visits for extreme heat to diagnose how zip codes are affected by extreme heat
fig, axes = plt.subplots(nrows=1,ncols=2,figsize=(12,6))

# plot first pandas frame in subplot style
ax1 = heat_zip_data.plot("Zip_PCT_64", cmap = 'OrRd', ax = axes[0], legend = True)
# plot second pandas frame in subplot style
ax2 = heat_zip_data.plot("Zip_PCT_65", cmap = 'OrRd', ax = axes[1], legend = True)


ax1.set_axis_off()
ax1.set_title('Rate of Daily Excess ER Visits by zip code')
ax2.set_axis_off()
ax2.set_title('Number of Daily Excess ER Visits by zip code')
plt.savefig('ER Visits zip.pdf')  # saves the current figure
plt.show()

newdf = heat_county_data.overlay(heat_zip_data, how="intersection")
ax = newdf.plot("Zip_PCT_64", figsize=(12, 6), cmap = "OrRd", alpha=0.5, edgecolor="k", legend = True)
ctx.add_basemap(ax, crs= newdf.crs)
plt.savefig('ER Visits Comb.pdf')  # saves the current figure

ax = newdf.plot("Zip_PCT_64", figsize=(20, 12), cmap = "OrRd", alpha=0.5, edgecolor="k", legend = True)
filtered_crop.to_crs("EPSG: 3857").plot(column = "main_crop_f", alpha = 0.5, figsize = (12,28), ax = ax, legend = True)
ctx.add_basemap(ax, crs= newdf.crs)
plt.savefig('Extreme heat and crop.png')  # saves the current figure

"""# CalEnviroScreen Data"""

fp = "/content/gdrive/MyDrive/CYPLAN 190 CSJ Module 1/Environment Sustainability/calenviroscreen40shpf2021shp"

cal_enviroscreen_data = gpd.read_file(fp)

cal_enviroscreen_data.columns

# Filter for useful columns and counties within csj region
filtered_cal_data = cal_enviroscreen_data[['Tract', 'ZIP', 'County','Ozone', 'OzoneP', 'PM2_5', 'TotPop19', 'Poverty', 'PovertyP', 'Unempl', 'Elderly65', 'Child_10', 'Hispanic', 'White', 'AfricanAm', 'NativeAm', 'OtherMult',
                                           'Pesticide', 'Shape_Leng', 'Shape_Area', 'DrinkWatP', 'TrafficP', 'HousBurdP','AAPI', 'geometry']]

csj_counties = ['Madera', 'Fresno', 'Kings', 'Tulare']

filtered_cal_data = filtered_cal_data[filtered_cal_data['County'].isin(csj_counties)]

# Identify most vulnerable population, their numbers, and base statistics on demographics
vuln_comm = filtered_cal_data[(filtered_cal_data["Poverty"] >= 70) & (filtered_cal_data["OzoneP"] >= 85) &
 (filtered_cal_data["PM2_5"] >= 13) & (filtered_cal_data["DrinkWatP"] >= 75)]


vuln_demo = vuln_comm[['TotPop19', 'Hispanic', 'White', 'AfricanAm', 'NativeAm', 'OtherMult', 'Elderly65']]
vuln_demo['Elderly_Pop'] = vuln_demo['TotPop19'] * vuln_demo['Elderly65'] / 100

vuln_pop = sum(vuln_comm['TotPop19'])
vuln_el_pop = int(sum(vuln_demo['Elderly_Pop']))

print("Total Vulnerable Population is", vuln_pop)
print("Vulnerable elderly population is", vuln_el_pop)

Hispanic_pop = vuln_demo['Hispanic'].mean()
White_pop = vuln_demo['White'].mean()
AfricanAm_pop = vuln_demo['AfricanAm'].mean()
NativeAm_pop = vuln_demo['NativeAm'].mean()
OtherMult_pop = vuln_demo['OtherMult'].mean()

demo_means = [Hispanic_pop, White_pop, AfricanAm_pop, NativeAm_pop, OtherMult_pop]

plt.figure(figsize=(8, 6))  # Adjust the figure size if needed
plt.bar(range(len(demo_means)), demo_means, color='orange')

# Adding labels and title
plt.xlabel('Demographic Groups')
plt.ylabel('Population Mean')
plt.title('Demographic Population Means in Vulnerable Areas')

# Adding x-axis labels
plt.xticks(range(len(demo_means)), ['Hispanic', 'White', 'African American', 'Native American', 'Other Mult'])

# Displaying the chart
plt.tight_layout()  # Adjust layout to prevent overlapping labels
plt.show()

vuln_comm[["County", "TotPop19", "Poverty", "PovertyP", "OzoneP", "PM2_5", "HousBurdP", "DrinkWatP"]]

ax = vuln_comm.plot('TotPop19', cmap = 'OrRd', alpha = 0.8, edgecolor = 'k', legend = True)
ax.set_axis_off()
ax.set_title("Population in Zips of Most Vulnerable Communities")
ctx.add_basemap(ax, crs= vuln_comm.crs)

filtered_cal_data





# Air Data Plot

# Making plots of ER visits for extreme heat to diagnose how counties are affected by extreme heat
fig, axes = plt.subplots(nrows=1,ncols=3,figsize=(15,6))

ax1 = filtered_cal_data.plot("Ozone", cmap = 'OrRd', ax = axes[0], legend = True)
ax2 = filtered_cal_data.plot("PM2_5", cmap = 'OrRd', ax = axes[1], legend = True)
ax3 = filtered_cal_data.plot("Pesticide", cmap = 'OrRd', ax = axes[2], legend = True)

ax1.set_axis_off()
ax1.set_title('Ozone')
ax2.set_axis_off()
ax2.set_title('PM2_5')
ax3.set_axis_off()
ax3.set_title("Pesticide")
plt.savefig('cal_enviro stats.pdf')  # saves the current figure
plt.show()

hs_data1 = filtered_cal_data[filtered_cal_data['TrafficP'] >= 0]
hs_data2 =filtered_cal_data[filtered_cal_data['DrinkWatP'] >= 0]
hs_data3 = filtered_cal_data[filtered_cal_data['HousBurdP'] >= 0]

# Air Data Plot

# Making plots of ER visits for extreme heat to diagnose how counties are affected by extreme heat
fig, axes = plt.subplots(nrows=1,ncols=3,figsize=(20,6))

ax1 = hs_data2.plot("DrinkWatP", cmap = 'OrRd', ax = axes[0], legend = True)
ax2 = hs_data1.plot("TrafficP", cmap = 'OrRd', ax = axes[1], legend = True)
ax3 = hs_data3.plot("HousBurdP", cmap = 'OrRd', ax = axes[2], legend = True)

ax1.set_axis_off()
ax1.set_title('Drinking Water %')
ax2.set_axis_off()
ax2.set_title('Traffic %')
ax3.set_axis_off()
ax3.set_title("Housing Burden %")
plt.savefig('cal_enviro stats.pdf')  # saves the current figure
plt.show()

"""# EJ Dataset"""

fp = "/content/gdrive/MyDrive/CYPLAN 190 CSJ Module 1/Environment Sustainability/EJSCREEN_CA.gdb"

ej_data = gpd.read_file(fp)

ej_data.head(5)

# Filtering data for within our csj valley region & needed variables
csj_counties = ['Fresno County', 'Kings County', 'Tulare County', 'Madera County']

ej_data = ej_data[ej_data['CNTY_NAME'].isin(csj_counties)]
ej_cleaned = ej_data[['ID', 'CNTY_NAME','REGION','P_PTRAF', 'ACSTOTHU', 'Shape_Length', 'Shape_Area', 'geometry']]

ej_cleaned

# Making plots of Traffix Proximity % and Housing Units built before 1960
fig, axes = plt.subplots(nrows=1,ncols=2,figsize=(20,6))

ax1 = ej_cleaned.plot("P_PTRAF", cmap = 'OrRd', ax = axes[0], legend = True)
ax2 = ej_cleaned.plot("ACSTOTHU", cmap = 'OrRd', ax = axes[1], legend = True)

ax1.set_axis_off()
ax1.set_title('Traffic Proximity %')
ax2.set_axis_off()
ax2.set_title('Housing Units Built Before 1960')
plt.savefig('access to resources.pdf')  # saves the current figure
plt.show()

"""# Joshua Final Graphs"""

# Simply overlaying ozone data on zip extreme heat er data. Problem with being difficult to visualize

ax = newdf.plot("Zip_PCT_64", figsize=(10, 10), alpha=0.5, edgecolor="k", legend = True)
filtered_cal_data.to_crs("EPSG: 3857").plot("Ozone", alpha = 0.5, cmap = "OrRd", ax = ax, legend = True)
ctx.add_basemap(ax, crs= newdf.crs)

# Define most affected zips by extreme heat
most_aff_heat = newdf[newdf["Zip_PCT_64"] >= 10]

print("The number of zips in the csj counties that have rates of excess ER for extreme heat over 10 daily is", len(most_aff_heat))

# Overlay ozone data over most_aff_heat to find ozone levels in most_aff_heat areas
ozone_heat_data = most_aff_heat.overlay(filtered_cal_data.to_crs("EPSG:3857"), how="intersection")
ax = ozone_heat_data.plot("OzoneP", figsize=(12, 6), cmap = "OrRd", alpha=0.5, edgecolor="k", legend = True)
ctx.add_basemap(ax, crs= ozone_heat_data.crs)

# Overlay pm2_5 data over most_aff_heat to find ozone levels in most_aff_heat areas
ozone_heat_data = most_aff_heat.overlay(filtered_cal_data.to_crs("EPSG:3857"), how="intersection")
ax = ozone_heat_data.plot("PM2_5", figsize=(12, 6), cmap = "OrRd", alpha=0.5, edgecolor="k", legend = True)
ctx.add_basemap(ax, crs= ozone_heat_data.crs)

#
print(filtered_cal_data["OzoneP"].mean())
print(ozone_heat_data["OzoneP"].mean())
print(newdf["Zip_PCT_64"].mean())
print(ozone_heat_data["Zip_PCT_64"].mean())
print(len(filtered_cal_data))

# Relation between High Ozone and Extreme Heat

ozone_90 = filtered_cal_data[filtered_cal_data["OzoneP"] >= 90]

ozone_heat_data = ozone_90.overlay(newdf.to_crs("EPSG:3310"), how="intersection")
ax = ozone_heat_data.plot("Zip_PCT_64", figsize=(12, 6), cmap = "OrRd", alpha=0.5, edgecolor="k", legend = True)
ax.set_axis_off()
ax.set_title("Extreme Heat Daily Excess ER Rate in Zips With Ozone Percent Over 90")
ctx.add_basemap(ax, crs= ozone_heat_data.crs)
plt.savefig('Relation between High Ozone and Extreme Heat.pdf')  # saves the current figure

print("Extreme Heat Daily Excess ER Rate in Zips with Ozone Percent Over 90 mean was", ozone_heat_data["Zip_PCT_64"].mean())
print("This compares with normal mean of ", newdf["Zip_PCT_64"].mean())
print("Standard deviation of this dataset is", newdf["Zip_PCT_64"].std())

# Relation between High PM2_5 and Extreme Heat

pm_14 = filtered_cal_data[filtered_cal_data["PM2_5"] >= 14]

pm_heat_data = pm_14.overlay(newdf.to_crs("EPSG:3310"), how="intersection")
ax = pm_heat_data.plot("Zip_PCT_64", figsize=(12, 6), cmap = "OrRd", alpha=0.5, vmin = 0, edgecolor="k", legend = True)
ax.set_axis_off()
ax.set_title("Extreme Heat Daily Excess ER Rate in Zips With PM2_5 Over 14")
ctx.add_basemap(ax, crs= pm_heat_data.crs)
plt.savefig('Relation between High PM2_5 and Extreme Heat.pdf')  # saves the current figure

print("Extreme Heat Daily Excess ER Rate in Zips with PM2_5 Over 14 was", pm_heat_data["Zip_PCT_64"].mean())
print("This compares with normal mean of ", newdf["Zip_PCT_64"].mean())
print("Standard deviation of this dataset is", newdf["Zip_PCT_64"].std())

ax = newdf.plot("Zip_PCT_64", figsize=(20, 12), cmap = "OrRd", alpha=0.5, edgecolor="k", legend = True)
filtered_crop.to_crs("EPSG: 3857").plot(column = "main_crop_f", alpha = 0.5, figsize = (12,28), ax = ax, legend = True)
ctx.add_basemap(ax, crs= newdf.crs)
plt.savefig('Extreme heat and crop.png')  # saves the current figure

# Crop Mapping Data and Heat Zip Data overlay

crop_heat_data = filtered_crop.overlay(newdf.to_crs("EPSG:4269"), how="intersection")

cheat_data = crop_heat_data[crop_heat_data["Zip_PCT_64"] >= 10]

ax = cheat_data.plot("main_crop_f", figsize=(20, 12), alpha=0.7, legend = True)

ax.set_axis_off()
ax.set_title("Crops Grown in Extreme Heat Areas by Zip")
ctx.add_basemap(ax, crs= crop_heat_data.crs)

plt.savefig('High Heat Crop Types.pdf')  # saves the current figure
plt.show()

crop_amount = cheat_data[["COUNTY", "main_crop_f", "ACRES"]].groupby("main_crop_f").sum().sort_values("ACRES", ascending = False)
total_crop_acres = sum(crop_amount["ACRES"])

crop_amount["Percentage (%)"] = crop_amount["ACRES"] / total_crop_acres * 100

print("Total Acres of Crop Land is: ", total_crop_acres)

# Reset index
crop_amount = crop_amount.reset_index()

# Using dataframe crop_amount: pie chart

import altair as alt
chart = alt.Chart(crop_amount).mark_arc().encode(
    theta=alt.Theta("ACRES:Q", stack=True),
    color=alt.Color("main_crop_f:N"),
    tooltip=["main_crop_f:N", "ACRES:Q", "Percentage (%):Q"]
).properties(height=300, width=300)
chart

# Air Data Plot

# Making plots of ER visits for extreme heat to diagnose how counties are affected by extreme heat
fig, axes = plt.subplots(nrows=1,ncols=2,figsize=(12,4))

ax1 = filtered_cal_data.plot("Ozone", cmap = 'OrRd', ax = axes[0], legend = True)
ax2 = filtered_cal_data.plot("PM2_5", cmap = 'OrRd', ax = axes[1], legend = True)

ax1.set_axis_off()
ax1.set_title('Ozone')
ax2.set_axis_off()
ax2.set_title('PM2_5')
plt.savefig('calstats.pdf')  # saves the current figure
plt.show()

"""# Heeseung Final Graphs"""

# Air Data Plot

# Making plots of ER visits for extreme heat to diagnose how counties are affected by extreme heat
fig, axes = plt.subplots(nrows=1,ncols=3,figsize=(20,6))

ax1 = hs_data2.plot("DrinkWatP", cmap = 'OrRd', ax = axes[0], legend = True)
ax2 = hs_data1.plot("TrafficP", cmap = 'OrRd', ax = axes[1], legend = True)
ax3 = hs_data3.plot("HousBurdP", cmap = 'OrRd', ax = axes[2], legend = True)

ax1.set_axis_off()
ax1.set_title('Drinking Water %')
ax2.set_axis_off()
ax2.set_title('Traffic %')
ax3.set_axis_off()
ax3.set_title("Housing Burden %")
plt.savefig('cal_enviro stats.pdf')  # saves the current figure
plt.show()

# Drinking Water Percentage

ax1 = hs_data2.plot("DrinkWatP", cmap = 'Reds', alpha = 0.8, figsize = (10, 8), legend = True)

ax1.set_axis_off()
ax1.set_title("Drinking Water Contaminant Index")
ctx.add_basemap(ax=ax1, crs= hs_data2.crs)

plt.savefig('Drinking Water %.pdf')  # saves the current figure
plt.show()

# Traffic %

ax1 = hs_data1.plot("TrafficP", cmap = 'Reds',alpha = 0.9, figsize = (10, 8), legend = True)

ax1.set_axis_off()
ax1.set_title("Traffic %")
ctx.add_basemap(ax=ax1, crs= hs_data1.crs)

plt.savefig('Traffic %.pdf')  # saves the current figure
plt.show()

# Housing Burden %

ax1 = hs_data3.plot("HousBurdP", cmap = 'Reds',alpha = 0.8, figsize = (10, 8), legend = True)

ax1.set_axis_off()
ax1.set_title("Housing Burden %")
ctx.add_basemap(ax=ax1, crs= hs_data3.crs)

plt.savefig('Housing Burden %.pdf')  # saves the current figure
plt.show()

# Traffix Proximity %
ax1 = ej_cleaned.plot("P_PTRAF", cmap = 'Reds', alpha = 0.8, figsize = (10, 8), legend = True)

ax1.set_axis_off()
ax1.set_title("Traffic Proximity %")
ctx.add_basemap(ax=ax1, crs= ej_cleaned.crs)

plt.savefig('Traffic Proximity %.pdf')  # saves the current figure
plt.show()

# Housing Units Built Before 1960

fig, axes = plt.subplots(nrows=1,ncols=2,figsize=(14,6))

ej_over = ej_cleaned[ej_cleaned["ACSTOTHU"] >= 800]

ax1 = ej_cleaned.plot("ACSTOTHU", cmap = 'Reds', alpha = 0.8, ax = axes[0], legend = True)
ax2 = ej_over.plot("ACSTOTHU", cmap = 'Reds', alpha = 0.8, ax = axes[1], vmin = 0, legend = True)

ax1.set_axis_off()
ax1.set_title("Housing Units Built Before 1960")

ax2.set_axis_off()
ax2.set_title('Housing Units Built Before 1960 (above 800 units)')

ctx.add_basemap(ax=ax1, crs= ej_cleaned.crs)
ctx.add_basemap(ax=ax2, crs= ej_over.crs)


plt.savefig('Housing Units Built Before 1960.pdf')  # saves the current figure
plt.show()